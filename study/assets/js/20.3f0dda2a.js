(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{374:function(t,a,e){"use strict";e.r(a);var s=e(42),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("作者：静默虚空")]),t._v(" "),e("p",[t._v("https://juejin.im/post/5c8296f85188257e3941b2d4")])]),t._v(" "),e("h3",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),e("p",[e("strong",[e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("Git 是什么？")])],1)]),t._v(" "),e("p",[t._v("Git 是一个开源的分布式版本控制系统。")]),t._v(" "),e("p",[e("strong",[e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("什么是版本控制？")])],1)]),t._v(" "),e("p",[t._v("版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。")]),t._v(" "),e("p",[e("strong",[e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("什么是分布式版本控制系统？")])],1)]),t._v(" "),e("p",[t._v("介绍分布式版本控制系统前，有必要先了解一下传统的集中式版本控制系统。")]),t._v(" "),e("p",[e("strong",[t._v("集中化的版本控制系统")]),t._v("，诸如 CVS，Subversion 等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。")]),t._v(" "),e("p",[t._v("这么做最显而易见的缺点是中央服务器的单点故障。如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。要是中央服务器的磁盘发生故障，碰巧没做备份，或者备份不够及时，就会有丢失数据的风险。最坏的情况是彻底丢失整个项目的所有历史更改记录。")]),t._v(" "),e("p",[e("strong",[t._v("分布式版本控制系统")]),t._v("的客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。因为每一次的提取操作，实际上都是一次对代码仓库的完整备份。")]),t._v(" "),e("p",[e("strong",[e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("为什么使用 Git？")])],1)]),t._v(" "),e("p",[t._v("Git 是分布式的。这是 Git 和其它非分布式的版本控制系统，例如 svn，cvs 等，最核心的区别。分布式带来以下好处：")]),t._v(" "),e("p",[e("strong",[t._v("工作时不需要联网")])]),t._v(" "),e("p",[t._v("首先，分布式版本控制系统根本没有 “中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件 A，你的同事也在他的电脑上改了文件 A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。")]),t._v(" "),e("p",[e("strong",[t._v("更加安全")])]),t._v(" "),e("p",[t._v("集中式版本控制系统，一旦中央服务器出了问题，所有人都无法工作。")]),t._v(" "),e("p",[t._v("分布式版本控制系统，每个人电脑中都有完整的版本库，所以某人的机器挂了，并不影响其它人。")]),t._v(" "),e("h3",{attrs:{id:"安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),e("p",[e("strong",[t._v("Debian/Ubuntu 环境安装")])]),t._v(" "),e("p",[t._v("如果你使用的系统是 Debian/Ubuntu ， 安装命令为：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \\\n> libz-dev libssl-dev\n$ apt-get install git-core\n$ git --version\ngit version 1.8.1.2\n")])])]),e("p",[e("strong",[t._v("Centos/RedHat 环境安装")])]),t._v(" "),e("p",[t._v("如果你使用的系统是 Centos/RedHat ，安装命令为：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ yum install curl-devel expat-devel gettext-devel \\\n> openssl-devel zlib-devel\n$ yum -y install git-core\n$ git --version\ngit version 1.7.1\n")])])]),e("p",[e("strong",[t._v("Windows 环境安装")])]),t._v(" "),e("p",[t._v("在 Git 官方下载地址下载 exe 安装包。按照安装向导安装即可。")]),t._v(" "),e("p",[t._v("建议安装 Git Bash 这个 git 的命令行工具。")]),t._v(" "),e("p",[e("strong",[t._v("Mac 环境安装")])]),t._v(" "),e("p",[t._v("在 Git 官方下载地址下载 mac 安装包。按照安装向导安装即可。")]),t._v(" "),e("h3",{attrs:{id:"配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),e("p",[t._v("Git 自带一个 "),e("code",[t._v("git config")]),t._v(" 的工具来帮助设置控制 Git 外观和行为的配置变量。这些变量存储在三个不同的位置：")]),t._v(" "),e("ol",[e("li",[e("code",[t._v("/etc/gitconfig")]),t._v(" 文件: 包含系统上每一个用户及他们仓库的通用配置。如果使用带有"),e("code",[t._v("--system")]),t._v(" 选项的 "),e("code",[t._v("git config")]),t._v(" 时，它会从此文件读写配置变量。")]),t._v(" "),e("li",[e("code",[t._v("\\~/.gitconfig")]),t._v(" 或 "),e("code",[t._v("\\~/.config/git/config")]),t._v(" 文件：只针对当前用户。可以传递 "),e("code",[t._v("--global")]),t._v(" 选项让 Git 读写此文件。")]),t._v(" "),e("li",[t._v("当前使用仓库的 Git 目录中的 "),e("code",[t._v("config")]),t._v(" 文件（就是 "),e("code",[t._v(".git/config")]),t._v("）：针对该仓库。\n每一个级别覆盖上一级别的配置，所以 "),e("code",[t._v(".git/config")]),t._v(" 的配置变量会覆盖 "),e("code",[t._v("/etc/gitconfig")]),t._v(" 中的配置变量。")])]),t._v(" "),e("p",[t._v("在 Windows 系统中，Git 会查找 "),e("code",[t._v("$HOME")]),t._v(" 目录下（一般情况下是"),e("code",[t._v("C:\\Users\\$USER")]),t._v("）的 "),e("code",[t._v(".gitconfig")]),t._v(" 文件。Git 同样也会寻找 "),e("code",[t._v("/etc/gitconfig")]),t._v(" 文件，但只限于 MSys 的根目录下，即安装 Git 时所选的目标位置。")]),t._v(" "),e("p",[e("strong",[e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("用户信息")])],1)]),t._v(" "),e("p",[t._v("当安装完 Git 应该做的第一件事就是设置你的用户名称与邮件地址。这样做很重要，因为每一个 Git 的提交都会使用这些信息，并且它会写入到你的每一次提交中，不可更改：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ git config --global user.name "John Doe"\n$ git config --global user.email johndoe@example.com\n')])])]),e("p",[t._v("再次强调，如果使用了 "),e("code",[t._v("--global")]),t._v(" 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 "),e("code",[t._v("--global")]),t._v(" 选项的命令来配置。")]),t._v(" "),e("p",[t._v("很多 GUI 工具都会在第一次运行时帮助你配置这些信息。")]),t._v(" "),e("p",[e("strong",[e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v(".gitignore")])],1)]),t._v(" "),e("p",[e("code",[t._v(".gitignore")]),t._v(" 文件可能从字面含义也不难猜出：这个文件里配置的文件或目录，会自动被 git 所忽略，不纳入版本控制。")]),t._v(" "),e("p",[t._v("在日常开发中，我们的项目经常会产生一些临时文件，如编译 Java 产生的 "),e("code",[t._v("*.class")]),t._v(" 文件，又或是 IDE 自动生成的隐藏目录（Intellij 的 "),e("code",[t._v(".idea")]),t._v(" 目录、Eclipse 的 "),e("code",[t._v(".settings")]),t._v(" 目录等）等等。这些文件或目录实在没必要纳入版本管理。在这种场景下，你就需要用到 "),e("code",[t._v(".gitignore")]),t._v(" 配置来过滤这些文件或目录。")]),t._v(" "),e("p",[t._v("配置的规则很简单，也没什么可说的，看几个例子，自然就明白了。")]),t._v(" "),e("p",[t._v("这里推荐一下 Github 的开源项目：https://github.com/github/gitignore")]),t._v(" "),e("p",[t._v("在这里，你可以找到很多常用的模板，如：Java、Nodejs、C++ 的 "),e("code",[t._v(".gitignore")]),t._v(" 模板等等。")]),t._v(" "),e("h3",{attrs:{id:"原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),e("p",[t._v("个人认为，对于 Git 这个版本工具，再不了解原理的情况下，直接去学习命令行，可能会一头雾水。所以，本文特意将原理放在命令使用章节之前讲解。")]),t._v(" "),e("p",[e("strong",[e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("版本库")])],1)]),t._v(" "),e("p",[t._v("当你一个项目到本地或创建一个 git 项目，项目目录下会有一个隐藏的 .git 子目录。这个目录是 git 用来跟踪管理版本库的，千万不要手动修改。")]),t._v(" "),e("p",[e("strong",[e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("哈希值")])],1)]),t._v(" "),e("p",[t._v("Git 中所有数据在存储前都计算校验和，然后以校验和来引用。这意味着不可能在 Git 不知情时更改任何文件内容或目录内容。这个功能建构在 Git 底层，是构成 Git 哲学不可或缺的部分。若你在传送过程中丢失信息或损坏文件，Git 就能发现。")]),t._v(" "),e("p",[t._v("Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。这是一个由 40 个十六进制字符（0-9 和 a-f）组成字符串，基于 Git 中文件的内容或目录结构计算出来。SHA-1 哈希看起来是这样：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("24b9da6552252987aa493b52f8696cd6d3b00373\n")])])]),e("p",[t._v("Git 中使用这种哈希值的情况很多，你将经常看到这种哈希值。实际上，Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。")]),t._v(" "),e("p",[e("strong",[e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("文件状态")])],1)]),t._v(" "),e("p",[t._v("在 GIt 中，你的文件可能会处于三种状态之一：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("已修改（modified）")]),t._v(" - 已修改表示修改了文件，但还没保存到数据库中。")]),t._v(" "),e("li",[e("strong",[t._v("已暂存（staged）")]),t._v(" - 已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。")]),t._v(" "),e("li",[e("strong",[t._v("已提交（committed）")]),t._v(" - 已提交表示数据已经安全的保存在本地数据库中。")])]),t._v(" "),e("p",[e("strong",[e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("工作区域")])],1)]),t._v(" "),e("p",[t._v("与文件状态对应的，不同状态的文件在 Git 中处于不同的工作区域。")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("工作区（working）")]),t._v(" - 当你 git clone 一个项目到本地，相当于在本地克隆了项目的一个副本。工作区是对项目的某个版本独立提取出来的内容。这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。")]),t._v(" "),e("li",[e("strong",[t._v("暂存区（staging）")]),t._v(" - 暂存区是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。有时候也被称作 `‘索引’'，不过一般说法还是叫暂存区。")]),t._v(" "),e("li",[e("strong",[t._v("本地仓库（local）")]),t._v(" - 提交更新，找到暂存区域的文件，将快照永久性存储到 Git 本地仓库。")]),t._v(" "),e("li",[e("strong",[t._v("远程仓库（remote）")]),t._v(" - 以上几个工作区都是在本地。为了让别人可以看到你的修改，你需要将你的更新推送到远程仓库。同理，如果你想同步别人的修改，你需要从远程仓库拉取更新。")])]),t._v(" "),e("h3",{attrs:{id:"命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命令"}},[t._v("#")]),t._v(" 命令")]),t._v(" "),e("p",[t._v("国外网友制作了一张 Git Cheat Sheet，总结很精炼，各位不妨收藏一下。")]),t._v(" "),e("p",[t._v("本节选择性介绍 git 中比较常用的命令行场景。")]),t._v(" "),e("h4",{attrs:{id:"创建仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建仓库"}},[t._v("#")]),t._v(" "),e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("创建仓库")])],1),t._v(" "),e("p",[t._v("克隆一个已创建的仓库：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 通过 SSH\n$ git clone ssh://user@domain.com/repo.git\n\n#通过 HTTP\n$ git clone http://domain.com/user/repo.git\n\n")])])]),e("p",[t._v("创建一个新的本地仓库：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git init\n")])])]),e("h4",{attrs:{id:"添加修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加修改"}},[t._v("#")]),t._v(" "),e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("添加修改")])],1),t._v(" "),e("p",[t._v("添加修改到暂存区：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 把指定文件添加到暂存区\n$ git add xxx\n\n# 把当前所有修改添加到暂存区\n$ git add .\n\n# 把所有修改添加到暂存区\n$ git add -A\n")])])]),e("p",[t._v("提交修改到本地仓库：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 提交本地的所有修改\n$ git commit -a\n\n# 提交之前已标记的变化\n$ git commit\n\n# 附加消息提交\n$ git commit -m 'commit message'\n")])])]),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("储藏")])],1),t._v(" "),e("p",[t._v("有时，我们需要在同一个项目的不同分支上工作。当需要切换分支时，偏偏本地的工作还没有完成，此时，提交修改显得不严谨，但是不提交代码又无法切换分支。这时，你可以使用 git stash 将本地的修改内容作为草稿储藏起来。")]),t._v(" "),e("p",[t._v("官方称之为储藏，但我个人更喜欢称之为存草稿。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 1. 将修改作为当前分支的草稿保存\n$ git stash\n\n# 2. 查看草稿列表\n$ git stash list\nstash@{0}: WIP on master: 6fae349 :memo: Writing docs.\n\n# 3.1 删除草稿\n$ git stash drop stash@{0}\n\n# 3.2 读取草稿\n$ git stash apply stash@{0}\n")])])]),e("h4",{attrs:{id:"撤销修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#撤销修改"}},[t._v("#")]),t._v(" "),e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("撤销修改")])],1),t._v(" "),e("p",[t._v("撤销本地修改：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 移除缓存区的所有文件（i.e. 撤销上次git add）\n$ git reset HEAD\n\n# 将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改\n$ git reset <commit>\n\n# 将HEAD重置到上一次提交的版本，并保留未提交的本地修改\n$ git reset --keep <commit>\n\n# 放弃工作目录下的所有修改\n$ git reset --hard HEAD\n\n# 将HEAD重置到指定的版本，并抛弃该版本之后的所有修改\n$ git reset --hard <commit-hash>\n\n# 用远端分支强制覆盖本地分支\n$ git reset --hard <remote/branch> e.g., upstream/master, origin/my-feature\n\n# 放弃某个文件的所有本地修改\n$ git checkout HEAD <file>\n")])])]),e("p",[t._v("删除添加.gitignore文件前错误提交的文件：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ git rm -r --cached .\n$ git add .\n$ git commit -m "remove xyz file"\n')])])]),e("p",[t._v("撤销远程修改（创建一个新的提交，并回滚到指定版本）：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git revert <commit-hash>\n")])])]),e("p",[t._v("彻底删除指定版本：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 执行下面命令后，commit-hash 提交后的记录都会被彻底删除，使用需谨慎\n$ git reset --hard <commit-hash>\n$ git push -f\n")])])]),e("h4",{attrs:{id:"更新与推送"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更新与推送"}},[t._v("#")]),t._v(" "),e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("更新与推送")])],1),t._v(" "),e("p",[t._v("更新：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 下载远程端版本，但不合并到HEAD中\n$ git fetch <remote>\n\n# 将远程端版本合并到本地版本中\n$ git pull origin master\n\n# 以rebase方式将远端分支与本地合并\n$ git pull --rebase <remote> <branch>\n")])])]),e("p",[t._v("推送：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 将本地版本推送到远程端\n$ git push remote <remote> <branch>\n\n# 删除远程端分支\n$ git push <remote> :<branch> (since Git v1.5.0)\n$ git push <remote> --delete <branch> (since Git v1.7.0)\n\n# 发布标签\n$ git push --tags\n")])])]),e("h4",{attrs:{id:"查看信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看信息"}},[t._v("#")]),t._v(" "),e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("查看信息")])],1),t._v(" "),e("p",[t._v("显示工作路径下已修改的文件：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git status\n")])])]),e("p",[t._v("显示与上次提交版本文件的不同：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git diff\n")])])]),e("p",[t._v("显示提交历史：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('# 从最新提交开始，显示所有的提交记录（显示hash， 作者信息，提交的标题和时间）\n$ git log\n\n# 显示某个用户的所有提交\n$ git log --author="username"\n\n# 显示某个文件的所有修改\n$ git log -p <file>\n')])])]),e("p",[t._v("显示搜索内容：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('# 从当前目录的所有文件中查找文本内容\n$ git grep "Hello"\n\n# 在某一版本中搜索文本\n$ git grep "Hello" v2.5\n')])])]),e("h4",{attrs:{id:"分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[t._v("#")]),t._v(" "),e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("分支")])],1),t._v(" "),e("p",[t._v("增删查分支：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 列出所有的分支\n$ git branch\n\n# 列出所有的远端分支\n$ git branch -r\n\n# 基于当前分支创建新分支\n$ git branch <new-branch>\n\n# 基于远程分支创建新的可追溯的分支\n$ git branch --track <new-branch> <remote-branch>\n\n# 删除本地分支\n$ git branch -d <branch>\n\n# 强制删除本地分支，将会丢失未合并的修改\n$ git branch -D <branch>\n")])])]),e("p",[t._v("切换分支：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 切换分支\n$ git checkout <branch>\n\n# 创建并切换到新分支\n$ git checkout -b <branch>\n")])])]),e("h4",{attrs:{id:"标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标签"}},[t._v("#")]),t._v(" "),e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("标签")])],1),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 给当前版本打标签\n$ git tag <tag-name>\n\n# 给当前版本打标签并附加消息\n$ git tag -a <tag-name>\n")])])]),e("h4",{attrs:{id:"合并与重置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合并与重置"}},[t._v("#")]),t._v(" "),e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("合并与重置")])],1),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("merge 与 rebase 虽然是 git 常用功能，但是强烈建议不要使用 git 命令来完成这项工作。")]),t._v(" "),e("p",[t._v("因为如果出现代码冲突，在没有代码比对工具的情况下，实在太艰难了。")]),t._v(" "),e("p",[t._v("你可以考虑使用各种 Git GUI 工具。")])]),t._v(" "),e("p",[t._v("合并：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 将分支合并到当前HEAD中\n$ git merge <branch>\n重置：\n\n# 将当前HEAD版本重置到分支中，请勿重置已发布的提交\n$ git rebase <branch>\n")])])]),e("h4",{attrs:{id:"github"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#github"}},[t._v("#")]),t._v(" "),e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("Github")])],1),t._v(" "),e("p",[t._v("Github 作为最著名的代码开源协作社区，在程序员圈想必无人不知，无人不晓。")]),t._v(" "),e("p",[t._v("这里不赘述 Github 的用法，确实有不会用的新手同学，可以参考官方教程：https://guides.github.com/")]),t._v(" "),e("h4",{attrs:{id:"clone-方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#clone-方式"}},[t._v("#")]),t._v(" "),e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("clone 方式")])],1),t._v(" "),e("p",[t._v("Git 支持三种协议：HTTPS / SSH / GIT")]),t._v(" "),e("p",[t._v("而 Github 上支持 HTTPS 和 SSH。")]),t._v(" "),e("p",[t._v("HTTPS 这种方式要求你每次 push 时都要输入用户名、密码，有些繁琐。")]),t._v(" "),e("p",[t._v("而 SSH 要求你本地生成证书，然后在你的 Github 账户中注册。第一次配置麻烦是麻烦了点，但是以后就免去了每次 push 需要输入用户名、密码的繁琐。")]),t._v(" "),e("p",[t._v("以下介绍以下，如何生成证书，以及在 Github 中注册。")]),t._v(" "),e("h4",{attrs:{id:"生成-ssh-公钥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生成-ssh-公钥"}},[t._v("#")]),t._v(" "),e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("生成 SSH 公钥")])],1),t._v(" "),e("p",[t._v("如前所述，许多 Git 服务器都使用 SSH 公钥进行认证。为了向 Git 服务器提供 SSH 公钥，如果某系统用户尚未拥有密钥，必须事先为其生成一份。这个过程在所有操作系统上都是相似的。首先，你需要确认自己是否已经拥有密钥。默认情况下，用户的 SSH 密钥存储在其 "),e("code",[t._v("\\~/.ssh")]),t._v(" 目录下。进入该目录并列出其中内容，你便可以快速确认自己是否已拥有密钥：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ cd ~/.ssh\n$ ls\nauthorized_keys2  id_dsa       known_hosts\nconfig            id_dsa.pub\n")])])]),e("p",[t._v("我们需要寻找一对以 "),e("code",[t._v("id_dsa")]),t._v(" 或 "),e("code",[t._v("id_rsa")]),t._v(" 命名的文件，其中一个带有 "),e("code",[t._v(".pub")]),t._v(" 扩展名。 "),e("code",[t._v(".pub")]),t._v(" 文件是你的公钥，另一个则是私钥。如果找不到这样的文件（或者根本没有 "),e("code",[t._v(".ssh")]),t._v(" 目录），你可以通过运行 "),e("code",[t._v("ssh-keygen")]),t._v(" 程序来创建它们。在 Linux/Mac 系统中，"),e("code",[t._v("ssh-keygen")]),t._v(" 随 SSH 软件包提供；在 Windows 上，该程序包含于 MSysGit 软件包中。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ ssh-keygen\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/schacon/.ssh/id_rsa):\nCreated directory '/home/schacon/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/schacon/.ssh/id_rsa.\nYour public key has been saved in /home/schacon/.ssh/id_rsa.pub.\nThe key fingerprint is:\nd0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 schacon@mylaptop.local\n")])])]),e("p",[t._v("首先 "),e("code",[t._v("ssh-keygen")]),t._v(" 会确认密钥的存储位置（默认是 "),e("code",[t._v(".ssh/id_rsa")]),t._v("），然后它会要求你输入两次密钥口令。如果你不想在使用密钥时输入口令，将其留空即可。")]),t._v(" "),e("p",[t._v("现在，进行了上述操作的用户需要将各自的公钥发送给任意一个 Git 服务器管理员（假设服务器正在使用基于公钥的 SSH 验证设置）。他们所要做的就是复制各自的 "),e("code",[t._v(".pub")]),t._v(" 文件内容，并将其通过邮件发送。公钥看起来是这样的：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ cat ~/.ssh/id_rsa.pub\nssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU\nGPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3\nPbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA\nt3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En\nmZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx\nNrRFi9wrf+M7Q== schacon@mylaptop.local\n")])])]),e("p",[t._v("在你的 Github 账户中，依次点击 "),e("strong",[t._v("Settings > SSH and GPG keys > New SSH key")])]),t._v(" "),e("p",[t._v("然后，将上面生成的公钥内容粘贴到 "),e("code",[t._v("Key")]),t._v(" 编辑框并保存。至此大功告成。")]),t._v(" "),e("p",[t._v("后面，你在克隆你的 Github 项目时使用 SSH 方式即可。")]),t._v(" "),e("p",[t._v("如果觉得我的讲解还不够细致，可以参考：https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/")]),t._v(" "),e("h3",{attrs:{id:"最佳实践-git-flow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最佳实践-git-flow"}},[t._v("#")]),t._v(" 最佳实践 Git Flow")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("详细内容，可以参考这篇文章：Git 在团队中的最佳实践 -- 如何正确使用 Git Flow")])]),t._v(" "),e("p",[t._v("Git 在实际开发中的最佳实践策略 Git Flow 可以归纳为以下：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("master")]),t._v(" "),e("strong",[t._v("分支")]),t._v(" - 也就是我们经常使用的主线分支，这个分支是最近发布到生产环境的代码，这个分支只能从其他分支合并，不能在这个分支直接修改。")]),t._v(" "),e("li",[e("code",[t._v("develop")]),t._v(" "),e("strong",[t._v("分支")]),t._v(" - 这个分支是我们的主开发分支，包含所有要发布到下一个 release 的代码，这个分支主要是从其他分支合并代码过来，比如 feature 分支。")]),t._v(" "),e("li",[e("code",[t._v("feature")]),t._v(" "),e("strong",[t._v("分支")]),t._v(" - 这个分支主要是用来开发一个新的功能，一旦开发完成，我们合并回 develop 分支进入下一个 release。")]),t._v(" "),e("li",[e("code",[t._v("release")]),t._v(" "),e("strong",[t._v("分支")]),t._v(" - 当你需要一个发布一个新 release 的时候，我们基于 Develop 分支创建一个 release 分支，完成 release 后，我们合并到 master 和 develop 分支。")]),t._v(" "),e("li",[e("code",[t._v("hotfix")]),t._v(" "),e("strong",[t._v("分支")]),t._v(" - 当我们在 master 发现新的 Bug 时候，我们需要创建一个 hotfix, 完成 hotfix 后，我们合并回 master 和 develop 分支，所以 hotfix 的改动会进入下一个 release。")])]),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"5"}},[t._v("常见问题")])],1),t._v(" "),e("h4",{attrs:{id:"编辑提交-editting-commits"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编辑提交-editting-commits"}},[t._v("#")]),t._v(" "),e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("编辑提交 (editting commits)")])],1),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我刚才提交了什么")])],1),t._v(" "),e("p",[t._v("如果你用 "),e("code",[t._v("git commit -a")]),t._v(" 提交了一次变化 (changes)，而你又不确定到底这次提交了哪些内容。你就可以用下面的命令显示当前"),e("code",[t._v("HEAD")]),t._v("上的最近一次的提交 (commit):")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git show\n")])])]),e("p",[t._v("或者")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git log -n1 -p\n")])])]),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我的提交信息 (commit message) 写错了")])],1),t._v(" "),e("p",[t._v("如果你的提交信息 (commit message) 写错了且这次提交 (commit) 还没有推(push), 你可以通过下面的方法来修改提交信息(commit message):")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git commit --amend\n")])])]),e("p",[t._v("这会打开你的默认编辑器, 在这里你可以编辑信息. 另一方面, 你也可以用一条命令一次完成:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git commit --amend -m 'xxxxxxx'\n")])])]),e("p",[t._v("如果你已经推 (push) 了这次提交 (commit), 你可以修改这次提交(commit) 然后强推(force push), 但是不推荐这么做。")]),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我提交 (commit) 里的用户名和邮箱不对")])],1),t._v(" "),e("p",[t._v("如果这只是单个提交 (commit)，修改它：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ git commit --amend --author "New Authorname <authoremail@mydomain.com>"\n')])])]),e("p",[t._v("如果你需要修改所有历史, 参考'git filter-branch'的指南页.")]),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我想从一个提交 (commit) 里移除一个文件")])],1),t._v(" "),e("p",[t._v("通过下面的方法，从一个提交 (commit) 里移除一个文件:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git checkout HEAD^ myfile\n$ git add -A\n$ git commit --amend\n")])])]),e("p",[t._v("这将非常有用，当你有一个开放的补丁 (open patch)，你往上面提交了一个不必要的文件，你需要强推(force push) 去更新这个远程补丁。")]),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我想删除我的的最后一次提交 (commit)")])],1),t._v(" "),e("p",[t._v("如果你需要删除推了的提交 (pushed commits)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled) 了的人的历史。简而言之，如果你不是很确定，千万不要这么做。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git reset HEAD^ --hard\n$ git push -f [remote] [branch]\n")])])]),e("p",[t._v("如果你还没有推到远程, 把 Git 重置 (reset) 到你最后一次提交前的状态就可以了(同时保存暂存的变化):")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(my-branch*)$ git reset --soft HEAD@{1}\n")])])]),e("p",[t._v("这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 "),e("code",[t._v("git revert SHAofBadCommit")]),t._v("， 那会创建一个新的提交 (commit) 用于撤消前一个提交的所有变化(changes)；或者, 如果你推的这个分支是 rebase-safe 的 (例如：其它开发者不会从这个分支拉), 只需要使用 "),e("code",[t._v("git push -f")]),t._v("；更多, 请参考 the above section。")]),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("删除任意提交 (commit)")])],1),t._v(" "),e("p",[t._v("同样的警告：不到万不得已的时候不要这么做.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git rebase --onto SHA1_OF_BAD_COMMIT^ SHA1_OF_BAD_COMMIT\n$ git push -f [remote] [branch]\n")])])]),e("p",[t._v("或者做一个 交互式 rebase 删除那些你想要删除的提交 (commit) 里所对应的行。")]),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我尝试推一个修正后的提交 (amended commit) 到远程，但是报错：")])],1),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("To https://github.com/yourusername/repo.git\n! [rejected]        mybranch -> mybranch (non-fast-forward)\nerror: failed to push some refs to 'https://github.com/tanay1337/webmaker.org.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n")])])]),e("p",[t._v("注意, rebasing(见下面)和修正 (amending) 会用一个"),e("strong",[t._v("新的提交(commit)代替旧的")]),t._v(", 所以如果之前你已经往远程仓库上推过一次修正前的提交 (commit)，那你现在就必须强推 (force push) (-f)。注意 – 总是 确保你指明一个分支!")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(my-branch)$ git push origin mybranch -f\n")])])]),e("p",[t._v("一般来说, "),e("strong",[t._v("要避免强推")]),t._v(". 最好是创建和推 (push) 一个新的提交(commit)，而不是强推一个修正后的提交。后者会使那些与该分支或该分支的子分支工作的开发者，在源历史中产生冲突。")]),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我意外的做了一次硬重置 (hard reset)，我想找回我的内容")])],1),t._v(" "),e("p",[t._v("如果你意外的做了 "),e("code",[t._v("git reset --hard")]),t._v(", 你通常能找回你的提交 (commit), 因为 Git 对每件事都会有日志，且都会保存几天。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git reflog\n")])])]),e("p",[t._v("你将会看到一个你过去提交 (commit) 的列表, 和一个重置的提交。选择你想要回到的提交 (commit) 的 SHA，再重置一次:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git reset --hard SHA1234\n")])])]),e("p",[t._v("这样就完成了。")]),t._v(" "),e("h4",{attrs:{id:"暂存-staging"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#暂存-staging"}},[t._v("#")]),t._v(" "),e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("暂存 (Staging)")])],1),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我需要把暂存的内容添加到上一次的提交 (commit)")])],1),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(my-branch*)$ git commit --amend\n")])])]),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我想要暂存一个新文件的一部分，而不是这个文件的全部")])],1),t._v(" "),e("p",[t._v("一般来说, 如果你想暂存一个文件的一部分, 你可这样做:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git add --patch filename.x\n")])])]),e("p",[e("code",[t._v("-p")]),t._v(" 简写。这会打开交互模式， 你将能够用 s 选项来分隔提交 (commit)；然而, 如果这个文件是新的, 会没有这个选择， 添加一个新文件时, 这样做:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git add -N filename.x\n")])])]),e("p",[t._v("然后, 你需要用 "),e("code",[t._v("e")]),t._v(" 选项来手动选择需要添加的行，执行 "),e("code",[t._v("git diff --cached")]),t._v(" 将会显示哪些行暂存了哪些行只是保存在本地了。")]),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我想把在一个文件里的变化 (changes) 加到两个提交 (commit) 里")])],1),t._v(" "),e("p",[e("code",[t._v("git add")]),t._v(" 会把整个文件加入到一个提交. "),e("code",[t._v("git add -p")]),t._v(" 允许交互式的选择你想要提交的部分.")]),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我想把暂存的内容变成未暂存，把未暂存的内容暂存起来")])],1),t._v(" "),e("p",[t._v("这个有点困难， 我能想到的最好的方法是先 stash 未暂存的内容， 然后重置 (reset)，再 pop 第一步 stashed 的内容, 最后再 add 它们。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git stash -k\n$ git reset --hard\n$ git stash pop\n$ git add -A\n")])])]),e("h4",{attrs:{id:"未暂存-unstaged-的内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#未暂存-unstaged-的内容"}},[t._v("#")]),t._v(" "),e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("未暂存 (Unstaged) 的内容")])],1),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我想把未暂存的内容移动到一个新分支")])],1),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git checkout -b my-branch\n")])])]),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我想把未暂存的内容移动到另一个已存在的分支")])],1),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git stash\n$ git checkout my-branch\n$ git stash pop\n")])])]),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我想丢弃本地未提交的变化 (uncommitted changes)")])],1),t._v(" "),e("p",[t._v("如果你只是想重置源 (origin) 和你本地 (local) 之间的一些提交(commit)，你可以：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("## one commit\n(my-branch)$ git reset --hard HEAD^\n## two commits\n(my-branch)$ git reset --hard HEAD^^\n## four commits\n(my-branch)$ git reset --hard HEAD~4\n## or\n(master)$ git checkout -f\n")])])]),e("p",[t._v("重置某个特殊的文件, 你可以用文件名做为参数:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git reset filename\n")])])]),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我想丢弃某些未暂存的内容")])],1),t._v(" "),e("p",[t._v("如果你想丢弃工作拷贝中的一部分内容，而不是全部。")]),t._v(" "),e("p",[t._v("签出 (checkout) 不需要的内容，保留需要的。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git checkout -p\n## Answer y to all of the snippets you want to drop\n")])])]),e("p",[t._v("另外一个方法是使用 stash， Stash 所有要保留下的内容, 重置工作拷贝, 重新应用保留的部分。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git stash -p\n## Select all of the snippets you want to save\n$ git reset --hard\n$ git stash pop\n")])])]),e("p",[t._v("或者, stash 你不需要的部分, 然后 stash drop。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git stash -p\n## Select all of the snippets you don't want to save\n$ git stash drop\n")])])]),e("h4",{attrs:{id:"分支-branches"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支-branches"}},[t._v("#")]),t._v(" "),e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("分支 (Branches)")])],1),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我从错误的分支拉取了内容，或把内容拉取到了错误的分支")])],1),t._v(" "),e("p",[t._v("这是另外一种使用 "),e("code",[t._v("git reflog")]),t._v(" 情况，找到在这次错误拉 (pull) 之前 HEAD 的指向。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git reflog\nab7555f HEAD@{0}: pull origin wrong-branch: Fast-forward\nc5bc55a HEAD@{1}: checkout: checkout message goes here\n")])])]),e("p",[t._v("重置分支到你所需的提交 (desired commit):")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git reset --hard c5bc55a\n")])])]),e("p",[t._v("完成。")]),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我想扔掉本地的提交 (commit)，以便我的分支与远程的保持一致")])],1),t._v(" "),e("p",[t._v("先确认你没有推 (push) 你的内容到远程。")]),t._v(" "),e("p",[e("code",[t._v("git status")]),t._v(" 会显示你领先 (ahead) 源(origin)多少个提交:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(my-branch)$ git status\n## On branch my-branch\n## Your branch is ahead of 'origin/my-branch' by 2 commits.\n##   (use \"git push\" to publish your local commits)\n#\n")])])]),e("p",[t._v("一种方法是:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git reset --hard origin/my-branch\n")])])]),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我需要提交到一个新分支，但错误的提交到了 master")])],1),t._v(" "),e("p",[t._v("在 master 下创建一个新分支，不切换到新分支, 仍在 master 下:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git branch my-branch\n")])])]),e("p",[t._v("把 master 分支重置到前一个提交:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git reset --hard HEAD^\n")])])]),e("p",[e("code",[t._v("HEAD^")]),t._v(" 是 "),e("code",[t._v("HEAD^1")]),t._v(" 的简写，你可以通过指定要设置的"),e("code",[t._v("HEAD")]),t._v("来进一步重置。")]),t._v(" "),e("p",[t._v("或者, 如果你不想使用 "),e("code",[t._v("HEAD^")]),t._v(", 找到你想重置到的提交 (commit) 的 hash("),e("code",[t._v("git log")]),t._v(" 能够完成)， 然后重置到这个 hash。使用"),e("code",[t._v("git push")]),t._v(" 同步内容到远程。")]),t._v(" "),e("p",[t._v("例如, master 分支想重置到的提交的 hash 为"),e("code",[t._v("a13b85e")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git reset --hard a13b85e\nHEAD is now at a13b85e\n")])])]),e("p",[t._v("签出 (checkout) 刚才新建的分支继续工作:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git checkout my-branch\n")])])]),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我想保留来自另外一个 ref-ish 的整个文件")])],1),t._v(" "),e("p",[t._v("假设你正在做一个原型方案 (原文为 working spike (see note)), 有成百的内容，每个都工作得很好。现在, 你提交到了一个分支，保存工作内容:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('(solution)$ git add -A && git commit -m "Adding all changes from this spike into one big commit."\n')])])]),e("p",[t._v("当你想要把它放到一个分支里 (可能是"),e("code",[t._v("feature")]),t._v(", 或者 "),e("code",[t._v("develop")]),t._v("), 你关心是保持整个文件的完整，你想要一个大的提交分隔成比较小。")]),t._v(" "),e("p",[t._v("假设你有:")]),t._v(" "),e("ul",[e("li",[t._v("分支 "),e("code",[t._v("solution")]),t._v(", 拥有原型方案， 领先 "),e("code",[t._v("develop")]),t._v(" 分支。")]),t._v(" "),e("li",[t._v("分支 "),e("code",[t._v("develop")]),t._v(", 在这里你应用原型方案的一些内容。\n我去可以通过把内容拿到你的分支里，来解决这个问题:")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(develop)$ git checkout solution -- file1.txt\n")])])]),e("p",[t._v("这会把这个文件内容从分支 solution 拿到分支 develop 里来:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("## On branch develop\n## Your branch is up-to-date with 'origin/develop'.\n## Changes to be committed:\n##  (use \"git reset HEAD <file>...\" to unstage)\n#\n##        modified:   file1.txt\n")])])]),e("p",[t._v("然后, 正常提交。")]),t._v(" "),e("p",[t._v("Note: Spike solutions are made to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem. ~ Wikipedia.")]),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我把几个提交 (commit) 提交到了同一个分支，而这些提交应该分布在不同的分支里")])],1),t._v(" "),e("p",[t._v("假设你有一个"),e("code",[t._v("master")]),t._v("分支， 执行"),e("code",[t._v("git log")]),t._v(", 你看到你做过两次提交:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git log\n\ncommit e3851e817c451cc36f2e6f3049db528415e3c114\nAuthor: Alex Lee <alexlee@example.com>\nDate:   Tue Jul 22 15:39:27 2014 -0400\n\n    Bug #21 - Added CSRF protection\n\ncommit 5ea51731d150f7ddc4a365437931cd8be3bf3131\nAuthor: Alex Lee <alexlee@example.com>\nDate:   Tue Jul 22 15:39:12 2014 -0400\n\n    Bug #14 - Fixed spacing on title\n\ncommit a13b85e984171c6e2a1729bb061994525f626d14\nAuthor: Aki Rose <akirose@example.com>\nDate:   Tue Jul 21 01:12:48 2014 -0400\n\n    First commit\n")])])]),e("p",[t._v("让我们用提交 hash(commit hash) 标记 bug ("),e("code",[t._v("e3851e8")]),t._v(" for #21, "),e("code",[t._v("5ea5173")]),t._v(" for #14).")]),t._v(" "),e("p",[t._v("首先, 我们把"),e("code",[t._v("master")]),t._v("分支重置到正确的提交 ("),e("code",[t._v("a13b85e")]),t._v("):")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git reset --hard a13b85e\nHEAD is now at a13b85e\n")])])]),e("p",[t._v("现在, 我们对 bug #21 创建一个新的分支:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git checkout -b 21\n(21)$\n")])])]),e("p",[t._v("接着, 我们用 cherry-pick 把对 bug #21 的提交放入当前分支。这意味着我们将应用 (apply) 这个提交(commit)，仅仅这一个提交(commit)，直接在 HEAD 上面。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(21)$ git cherry-pick e3851e8\n")])])]),e("p",[t._v("这时候, 这里可能会产生冲突， 参见交互式 rebasing 章 "),e("strong",[t._v("冲突节")]),t._v(" 解决冲突.")]),t._v(" "),e("p",[t._v("再者， 我们为 bug #14 创建一个新的分支, 也基于"),e("code",[t._v("master")]),t._v("分支")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(21)$ git checkout master\n(master)$ git checkout -b 14\n(14)$\n")])])]),e("p",[t._v("最后, 为 bug #14 执行 "),e("code",[t._v("cherry-pick")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(14)$ git cherry-pick 5ea5173\n")])])]),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我想删除上游 (upstream) 分支被删除了的本地分支")])],1),t._v(" "),e("p",[t._v("一旦你在 github 上面合并 (merge) 了一个 pull request, 你就可以删除你 fork 里被合并的分支。如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git fetch -p\n")])])]),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我不小心删除了我的分支")])],1),t._v(" "),e("p",[t._v("如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。让我们先创建一个分支和一个新的文件:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git checkout -b my-branch\n(my-branch)$ git branch\n(my-branch)$ touch foo.txt\n(my-branch)$ ls\nREADME.md foo.txt\n")])])]),e("p",[t._v("添加文件并做一次提交")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(my-branch)$ git add .\n(my-branch)$ git commit -m 'foo.txt added'\n(my-branch)$ foo.txt added\n 1 files changed, 1 insertions(+)\n create mode 100644 foo.txt\n(my-branch)$ git log\n\ncommit 4e3cd85a670ced7cc17a2b5d8d3d809ac88d5012\nAuthor: siemiatj <siemiatj@example.com>\nDate:   Wed Jul 30 00:34:10 2014 +0200\n\n    foo.txt added\n\ncommit 69204cdf0acbab201619d95ad8295928e7f411d5\nAuthor: Kate Hudson <katehudson@example.com>\nDate:   Tue Jul 29 13:14:46 2014 -0400\n\n    Fixes #6: Force pushing after amending commits\n")])])]),e("p",[t._v("现在我们切回到主 (master) 分支，‘不小心的’删除my-branch分支")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(my-branch)$ git checkout master\nSwitched to branch 'master'\nYour branch is up-to-date with 'origin/master'.\n(master)$ git branch -D my-branch\nDeleted branch my-branch (was 4e3cd85).\n(master)$ echo oh noes, deleted my branch!\noh noes, deleted my branch!\n")])])]),e("p",[t._v("在这时候你应该想起了reflog, 一个升级版的日志，它存储了仓库 (repo) 里面所有动作的历史。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git reflog\n69204cd HEAD@{0}: checkout: moving from my-branch to master\n4e3cd85 HEAD@{1}: commit: foo.txt added\n69204cd HEAD@{2}: checkout: moving from master to my-branch\n")])])]),e("p",[t._v("正如你所见，我们有一个来自删除分支的提交 hash(commit hash)，接下来看看是否能恢复删除了的分支。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git checkout -b my-branch-help\nSwitched to a new branch 'my-branch-help'\n(my-branch-help)$ git reset --hard 4e3cd85\nHEAD is now at 4e3cd85 foo.txt added\n(my-branch-help)$ ls\nREADME.md foo.txt\n")])])]),e("p",[t._v("看! 我们把删除的文件找回来了。Git 的 reflog 在 rebasing 出错的时候也是同样有用的。")]),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我想删除一个分支")])],1),t._v(" "),e("p",[t._v("删除一个远程分支:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git push origin --delete my-branch\n")])])]),e("p",[t._v("你也可以:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git push origin :my-branch\n")])])]),e("p",[t._v("删除一个本地分支:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git branch -D my-branch\n")])])]),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我想从别人正在工作的远程分支签出 (checkout) 一个分支")])],1),t._v(" "),e("p",[t._v("首先, 从远程拉取 (fetch) 所有分支:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git fetch --all\n")])])]),e("p",[t._v("假设你想要从远程的daves分支签出到本地的daves")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git checkout --track origin/daves\nBranch daves set up to track remote branch daves from origin.\nSwitched to a new branch 'daves'\n")])])]),e("p",[t._v("("),e("code",[t._v("--track")]),t._v(" 是 "),e("code",[t._v("git checkout -b [branch] [remotename]/[branch]")]),t._v("的简写)")]),t._v(" "),e("p",[t._v("这样就得到了一个"),e("code",[t._v("daves")]),t._v("分支的本地拷贝, 任何推过 (pushed) 的更新，远程都能看到.")]),t._v(" "),e("h4",{attrs:{id:"rebasing-和合并-merging"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rebasing-和合并-merging"}},[t._v("#")]),t._v(" "),e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("Rebasing 和合并 (Merging)")])],1),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我想撤销 rebase/merge")])],1),t._v(" "),e("p",[t._v("你可以合并 (merge) 或 rebase 了一个错误的分支, 或者完成不了一个进行中的 rebase/merge。Git 在进行危险操作的时候会把原始的 HEAD 保存在一个叫 ORIG_HEAD 的变量里, 所以要把分支恢复到 rebase/merge 前的状态是很容易的。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(my-branch)$ git reset --hard ORIG_HEAD\n")])])]),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我已经 rebase 过, 但是我不想强推 (force push)")])],1),t._v(" "),e("p",[t._v("不幸的是，如果你想把这些变化 (changes) 反应到远程分支上，你就必须得强推 (force push)。是因你快进(Fast forward) 了提交，改变了 Git 历史, 远程分支不会接受变化 (changes)，除非强推(force push)。这就是许多人使用 merge 工作流, 而不是 rebasing 工作流的主要原因之一， 开发者的强推(force push) 会使大的团队陷入麻烦。使用时需要注意，一种安全使用 rebase 的方法是，不要把你的变化 (changes) 反映到远程分支上, 而是按下面的做:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git checkout my-branch\n(my-branch)$ git rebase -i master\n(my-branch)$ git checkout master\n(master)$ git merge --ff-only my-branch\n")])])]),e("p",[t._v("更多, 参见 this SO thread.")]),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我需要组合 (combine) 几个提交(commit)")])],1),t._v(" "),e("p",[t._v("假设你的工作分支将会做对于 master 的 pull-request。一般情况下你不关心提交 (commit) 的时间戳，只想组合 所有 提交 (commit) 到一个单独的里面, 然后重置(reset) 重提交 (recommit)。确保主(master) 分支是最新的和你的变化都已经提交了, 然后:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('(my-branch)$ git reset --soft master\n(my-branch)$ git commit -am "New awesome feature"\n')])])]),e("p",[t._v("如果你想要更多的控制, 想要保留时间戳, 你需要做交互式 rebase (interactive rebase):")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(my-branch)$ git rebase -i master\n")])])]),e("p",[t._v("如果没有相对的其它分支， 你将不得不相对自己的"),e("code",[t._v("HEAD")]),t._v(" 进行 rebase。例如：你想组合最近的两次提交 (commit), 你将相对于"),e("code",[t._v("HEAD\\~2")]),t._v(" 进行 rebase， 组合最近 3 次提交 (commit), 相对于"),e("code",[t._v("HEAD\\~3")]),t._v(", 等等。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git rebase -i HEAD~2\n")])])]),e("p",[t._v("在你执行了交互式 rebase 的命令 (interactive rebase command) 后, 你将在你的编辑器里看到类似下面的内容:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('pick a9c8a1d Some refactoring\npick 01b2fd8 New awesome feature\npick b729ad5 fixup\npick e3851e8 another fix\n\n## Rebase 8074d12..b729ad5 onto 8074d12\n#\n## Commands:\n##  p, pick = use commit\n##  r, reword = use commit, but edit the commit message\n##  e, edit = use commit, but stop for amending\n##  s, squash = use commit, but meld into previous commit\n##  f, fixup = like "squash", but discard this commit\'s log message\n##  x, exec = run command (the rest of the line) using shell\n#\n## These lines can be re-ordered; they are executed from top to bottom.\n#\n## If you remove a line here THAT COMMIT WILL BE LOST.\n#\n## However, if you remove everything, the rebase will be aborted.\n#\n## Note that empty commits are commented out\n')])])]),e("p",[t._v("所有以 "),e("code",[t._v("#")]),t._v(" 开头的行都是注释, 不会影响 rebase.")]),t._v(" "),e("p",[t._v("然后，你可以用任何上面命令列表的命令替换 "),e("code",[t._v("pick")]),t._v(", 你也可以通过删除对应的行来删除一个提交 (commit)。")]),t._v(" "),e("p",[t._v("例如, 如果你想 "),e("strong",[t._v("单独保留最旧 (first) 的提交(commit), 组合所有剩下的到第二个里面")]),t._v(", 你就应该编辑第二个提交 (commit) 后面的每个提交(commit) 前的单词为 "),e("code",[t._v("f")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pick a9c8a1d Some refactoring\npick 01b2fd8 New awesome feature\nf b729ad5 fixup\nf e3851e8 another fix\n")])])]),e("p",[t._v("如果你想组合这些提交 (commit) "),e("strong",[t._v("并重命名这个提交 (commit)")]),t._v(", 你应该在第二个提交 (commit) 旁边添加一个 "),e("code",[t._v("r")]),t._v(" ，或者更简单的用"),e("code",[t._v("s")]),t._v(" 替代 "),e("code",[t._v("f")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pick a9c8a1d Some refactoring\npick 01b2fd8 New awesome feature\ns b729ad5 fixup\ns e3851e8 another fix\n")])])]),e("p",[t._v("你可以在接下来弹出的文本提示框里重命名提交 (commit)。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Newer, awesomer features\n\n## Please enter the commit message for your changes. Lines starting\n## with '#' will be ignored, and an empty message aborts the commit.\n## rebase in progress; onto 8074d12\n## You are currently editing a commit while rebasing branch 'master' on '8074d12'.\n#\n## Changes to be committed:\n#modified:   README.md\n#\n")])])]),e("p",[t._v("如果成功了, 你应该看到类似下面的内容:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ Successfully rebased and updated refs/heads/master.\n")])])]),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("安全合并 (merging) 策略")])],1),t._v(" "),e("p",[e("code",[t._v("--no-commit")]),t._v(" 执行合并 (merge) 但不自动提交, 给用户在做提交前检查和修改的机会。 "),e("code",[t._v("no-ff")]),t._v(" 会为特性分支 (feature branch) 的存在过留下证据, 保持项目历史一致。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git merge --no-ff --no-commit my-branch\n")])])]),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我需要将一个分支合并成一个提交 (commit)")])],1),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git merge --squash my-branch\n")])])]),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我只想组合 (combine) 未推的提交(unpushed commit)")])],1),t._v(" "),e("p",[t._v("有时候，在将数据推向上游之前，你有几个正在进行的工作提交 (commit)。这时候不希望把已经推(push) 过的组合进来，因为其他人可能已经有提交 (commit) 引用它们了。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git rebase -i @{u}\n")])])]),e("p",[t._v("这会产生一次交互式的 rebase(interactive rebase), 只会列出没有推 (push) 的提交(commit)， 在这个列表时进行 reorder/fix/squash 都是安全的。")]),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("检查是否分支上的所有提交 (commit) 都合并 (merge) 过了")])],1),t._v(" "),e("p",[t._v("检查一个分支上的所有提交 (commit) 是否都已经合并 (merge) 到了其它分支, 你应该在这些分支的 head(或任何 commits)之间做一次 diff:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git log --graph --left-right --cherry-pick --oneline HEAD...feature/120-on-scroll\n")])])]),e("p",[t._v("这会告诉你在一个分支里有而另一个分支没有的所有提交 (commit), 和分支之间不共享的提交(commit) 的列表。另一个做法可以是:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git log master ^feature/120-on-scroll --no-merges\n")])])]),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("交互式 rebase(interactive rebase) 可能出现的问题")])],1),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("这个 rebase 编辑屏幕出现'noop'")])],1),t._v(" "),e("p",[t._v("如果你看到的是这样:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("noop\n")])])]),e("p",[t._v("这意味着你 rebase 的分支和当前分支在同一个提交 (commit) 上, 或者 领先 (ahead) 当前分支。你可以尝试:")]),t._v(" "),e("ul",[e("li",[t._v("检查确保主 (master) 分支没有问题")]),t._v(" "),e("li",[t._v("rebase "),e("code",[t._v("HEAD\\~2")]),t._v(" 或者更早")])]),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("有冲突的情况")])],1),t._v(" "),e("p",[t._v("如果你不能成功的完成 rebase, 你可能必须要解决冲突。")]),t._v(" "),e("p",[t._v("首先执行 "),e("code",[t._v("git status")]),t._v(" 找出哪些文件有冲突:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('(my-branch)$ git status\nOn branch my-branch\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\nmodified:   README.md\n')])])]),e("p",[t._v("在这个例子里面, "),e("code",[t._v("README.md")]),t._v(" 有冲突。打开这个文件找到类似下面的内容:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("   <<<<<<< HEAD\n   some code\n   =========\n   some code\n   >>>>>>> new-commit\n")])])]),e("p",[t._v("你需要解决新提交的代码 (示例里, 从中间"),e("code",[t._v("==")]),t._v("线到"),e("code",[t._v("new-commit")]),t._v("的地方) 与"),e("code",[t._v("HEAD")]),t._v(" 之间不一样的地方.")]),t._v(" "),e("p",[t._v("有时候这些合并非常复杂，你应该使用可视化的差异编辑器 (visual diff editor):")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master*)$ git mergetool -t opendiff\n")])])]),e("p",[t._v("在你解决完所有冲突和测试过后, git add 变化了的 (changed) 文件, 然后用"),e("code",[t._v("git rebase --continue")]),t._v(" 继续 rebase。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(my-branch)$ git add README.md\n(my-branch)$ git rebase --continue\n")])])]),e("p",[t._v("如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行git rebase --skip。")]),t._v(" "),e("p",[t._v("任何时候你想结束整个 rebase 过程，回来 rebase 前的分支状态, 你可以做:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(my-branch)$ git rebase --abort\n")])])]),e("h4",{attrs:{id:"杂项-miscellaneous-objects"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#杂项-miscellaneous-objects"}},[t._v("#")]),t._v(" "),e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("杂项 (Miscellaneous Objects)")])],1),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("克隆所有子模块")])],1),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git clone --recursive git://github.com/foo/bar.git\n")])])]),e("p",[t._v("如果已经克隆了:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git submodule update --init --recursive\n")])])]),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("删除标签 (tag)")])],1),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git tag -d <tag_name>\n$ git push <remote> :refs/tags/<tag_name>\n")])])]),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("恢复已删除标签 (tag)")])],1),t._v(" "),e("p",[t._v("如果你想恢复一个已删除标签 (tag), 可以按照下面的步骤: 首先, 需要找到无法访问的标签 (unreachable tag):")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git fsck --unreachable | grep tag\n")])])]),e("p",[t._v("记下这个标签 (tag) 的 hash，然后用 Git 的 update-ref:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git update-ref refs/tags/<tag_name> <hash>\n")])])]),e("p",[t._v("这时你的标签 (tag) 应该已经恢复了。")]),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("已删除补丁 (patch)")])],1),t._v(" "),e("p",[t._v("如果某人在 GitHub 上给你发了一个 pull request, 但是然后他删除了他自己的原始 fork, 你将没法克隆他们的提交 (commit) 或使用 git am。在这种情况下, 最好手动的查看他们的提交 (commit)，并把它们拷贝到一个本地新分支，然后做提交。")]),t._v(" "),e("p",[t._v("做完提交后, 再修改作者，参见变更作者。然后, 应用变化, 再发起一个新的 pull request。")]),t._v(" "),e("h4",{attrs:{id:"跟踪文件-tracking-files"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跟踪文件-tracking-files"}},[t._v("#")]),t._v(" "),e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("跟踪文件 (Tracking Files)")])],1),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我只想改变一个文件名字的大小写，而不修改内容")])],1),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git mv --force myfile MyFile\n")])])]),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我想从 Git 删除一个文件，但保留该文件")])],1),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git rm --cached log.txt\n")])])]),e("h4",{attrs:{id:"配置-configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置-configuration"}},[t._v("#")]),t._v(" "),e("font",{attrs:{color:"#ff9900",size:"4"}},[t._v("配置 (Configuration)")])],1),t._v(" "),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我想给一些 Git 命令添加别名 (alias)\n")])],1),t._v(" "),e("p",[t._v("在 OS X 和 Linux 下, 你的 Git 的配置文件储存在 "),e("code",[t._v("\\~/.gitconfig")]),t._v("。我在"),e("code",[t._v("[alias]")]),t._v(" 部分添加了一些快捷别名 (和一些我容易拼写错误的)，如下:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[alias]\n    a = add\n    amend = commit --amend\n    c = commit\n    ca = commit --amend\n    ci = commit -a\n    co = checkout\n    d = diff\n    dc = diff --changed\n    ds = diff --staged\n    f = fetch\n    loll = log --graph --decorate --pretty=oneline --abbrev-commit\n    m = merge\n    one = log --pretty=oneline\n    outstanding = rebase -i @{u}\n    s = status\n    unpushed = log @{u}\n    wc = whatchanged\n    wip = rebase -i @{u}\n    zap = fetch -p\n")])])]),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我想缓存一个仓库 (repository) 的用户名和密码")])],1),t._v(" "),e("p",[t._v("你可能有一个仓库需要授权，这时你可以缓存用户名和密码，而不用每次推 / 拉 (push/pull) 的时候都输入，Credential helper 能帮你。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git config --global credential.helper cache\n## Set git to use the credential memory cache\n$ git config --global credential.helper 'cache --timeout=3600'\n## Set the cache to timeout after 1 hour (setting is in seconds)\n")])])]),e("p",[e("font",{attrs:{color:"#ff9900",size:"3"}},[t._v("我不知道我做错了些什么")])],1),t._v(" "),e("p",[t._v("你把事情搞砸了：你 "),e("code",[t._v("重置(reset)")]),t._v(" 了一些东西, 或者你合并了错误的分支, 亦或你强推了后找不到你自己的提交 (commit) 了。有些时候, 你一直都做得很好, 但你想回到以前的某个状态。")]),t._v(" "),e("p",[t._v("这就是 "),e("code",[t._v("git reflog")]),t._v(" 的目的， "),e("code",[t._v("reflog")]),t._v(" 记录对分支顶端 (the tip of a branch) 的任何改变, 即使那个顶端没有被任何分支或标签引用。基本上, 每次 HEAD 的改变, 一条新的记录就会增加到"),e("code",[t._v("reflog")]),t._v("。遗憾的是，这只对本地分支起作用，且它只跟踪动作 (例如，不会跟踪一个没有被记录的文件的任何改变)。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(master)$ git reflog\n0a2e358 HEAD@{0}: reset: moving to HEAD\\~2\n0254ea7 HEAD@{1}: checkout: moving from 2.2 to master\nc10f740 HEAD@{2}: checkout: moving from master to 2.2\n")])])]),e("p",[t._v("上面的 reflog 展示了从 master 分支签出 (checkout) 到 2.2 分支，然后再签回。那里，还有一个硬重置 (hard reset) 到一个较旧的提交。最新的动作出现在最上面以 "),e("code",[t._v("HEAD@{0}")]),t._v("标识.")]),t._v(" "),e("p",[t._v("如果事实证明你不小心回移 (move back) 了提交(commit), reflog 会包含你不小心回移前 master 上指向的提交(0254ea7)。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git reset --hard 0254ea7\n")])])]),e("p",[t._v("然后使用 git reset 就可以把 master 改回到之前的 commit，这提供了一个在历史被意外更改情况下的安全网。")]),t._v(" "),e("h1",{attrs:{id:"git-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-2"}},[t._v("#")]),t._v(" Git")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#git"}},[t._v("Git")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E9%9B%86%E4%B8%AD%E5%BC%8F%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F"}},[t._v("集中式与分布式")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1%E5%99%A8"}},[t._v("中心服务器")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%B7%A5%E4%BD%9C%E6%B5%81"}},[t._v("工作流")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%88%86%E6%94%AF%E5%AE%9E%E7%8E%B0"}},[t._v("分支实现")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%86%B2%E7%AA%81"}},[t._v("冲突")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#fast-forward"}},[t._v("Fast forward")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%82%A8%E8%97%8Fstashing"}},[t._v("储藏（Stashing）")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#ssh-%E4%BC%A0%E8%BE%93%E8%AE%BE%E7%BD%AE"}},[t._v("SSH 传输设置")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#gitignore-%E6%96%87%E4%BB%B6"}},[t._v(".gitignore 文件")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#git-%E5%91%BD%E4%BB%A4%E4%B8%80%E8%A7%88"}},[t._v("Git 命令一览")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99"}},[t._v("参考资料")])])])])]),t._v(" "),e("h2",{attrs:{id:"集中式与分布式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集中式与分布式"}},[t._v("#")]),t._v(" 集中式与分布式")]),t._v(" "),e("p",[t._v("Git 属于分布式版本控制系统，而 SVN 属于集中式。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208200656794.png"}})]),e("br"),t._v(" "),e("p",[t._v("集中式版本控制只有中心服务器拥有一份代码，而分布式版本控制每个人的电脑上就有一份完整的代码。")]),t._v(" "),e("p",[t._v("集中式版本控制有安全性问题，当中心服务器挂了所有人都没办法工作了。")]),t._v(" "),e("p",[t._v("集中式版本控制需要连网才能工作，如果网速过慢，那么提交一个文件会慢的无法让人忍受。而分布式版本控制不需要连网就能工作。")]),t._v(" "),e("p",[t._v("分布式版本控制新建分支、合并分支操作速度非常快，而集中式版本控制新建一个分支相当于复制一份完整代码。")]),t._v(" "),e("h2",{attrs:{id:"中心服务器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#中心服务器"}},[t._v("#")]),t._v(" 中心服务器")]),t._v(" "),e("p",[t._v("中心服务器用来交换每个用户的修改，没有中心服务器也能工作，但是中心服务器能够 24 小时保持开机状态，这样就能更方便的交换修改。")]),t._v(" "),e("p",[t._v("Github 就是一个中心服务器。")]),t._v(" "),e("h2",{attrs:{id:"工作流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作流"}},[t._v("#")]),t._v(" 工作流")]),t._v(" "),e("p",[t._v("新建一个仓库之后，当前目录就成为了工作区，工作区下有一个隐藏目录 .git，它属于 Git 的版本库。")]),t._v(" "),e("p",[t._v("Git 的版本库有一个称为 Stage 的暂存区以及最后的 History 版本库，History 存储所有分支信息，使用一个 HEAD 指针指向当前分支。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208195941661.png"}})]),e("br"),t._v(" "),e("ul",[e("li",[t._v("git add files 把文件的修改添加到暂存区")]),t._v(" "),e("li",[t._v("git commit 把暂存区的修改提交到当前分支，提交之后暂存区就被清空了")]),t._v(" "),e("li",[t._v("git reset -- files 使用当前分支上的修改覆盖暂存区，用来撤销最后一次 git add files")]),t._v(" "),e("li",[t._v("git checkout -- files 使用暂存区的修改覆盖工作目录，用来撤销本地修改")])]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208200014395.png"}})]),e("br"),t._v(" "),e("p",[t._v("可以跳过暂存区域直接从分支中取出修改，或者直接提交修改到分支中。")]),t._v(" "),e("ul",[e("li",[t._v("git commit -a 直接把所有文件的修改添加到暂存区然后执行提交")]),t._v(" "),e("li",[t._v("git checkout HEAD -- files 取出最后一次修改，可以用来进行回滚操作")])]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208200543923.png"}})]),e("br"),t._v(" "),e("h2",{attrs:{id:"分支实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支实现"}},[t._v("#")]),t._v(" 分支实现")]),t._v(" "),e("p",[t._v("使用指针将每个提交连接成一条时间线，HEAD 指针指向当前分支指针。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208203219927.png"}})]),e("br"),t._v(" "),e("p",[t._v("新建分支是新建一个指针指向时间线的最后一个节点，并让 HEAD 指针指向新分支，表示新分支成为当前分支。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208203142527.png"}})]),e("br"),t._v(" "),e("p",[t._v("每次提交只会让当前分支指针向前移动，而其它分支指针不会移动。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208203112400.png"}})]),e("br"),t._v(" "),e("p",[t._v("合并分支也只需要改变指针即可。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208203010540.png"}})]),e("br"),t._v(" "),e("h2",{attrs:{id:"冲突"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#冲突"}},[t._v("#")]),t._v(" 冲突")]),t._v(" "),e("p",[t._v("当两个分支都对同一个文件的同一行进行了修改，在分支合并时就会产生冲突。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208203034705.png"}})]),e("br"),t._v(" "),e("p",[t._v("Git 会使用 <<<<<<< ，======= ，>>>>>>> 标记出不同分支的内容，只需要把不同分支中冲突部分修改成一样就能解决冲突。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<<<<<<< HEAD\nCreating a new branch is quick & simple.\n=======\nCreating a new branch is quick AND simple.\n>>>>>>> feature1\n")])])]),e("h2",{attrs:{id:"fast-forward"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fast-forward"}},[t._v("#")]),t._v(" Fast forward")]),t._v(" "),e("p",[t._v('"快进式合并"（fast-farward merge），会直接将 master 分支指向合并的分支，这种模式下进行分支合并会丢失分支信息，也就不能在分支历史上看出分支信息。')]),t._v(" "),e("p",[t._v("可以在合并时加上 --no-ff 参数来禁用 Fast forward 模式，并且加上 -m 参数让合并时产生一个新的 commit。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ git merge --no-ff -m "merge with no-ff" dev\n')])])]),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208203639712.png"}})]),e("br"),t._v(" "),e("h2",{attrs:{id:"储藏-stashing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#储藏-stashing"}},[t._v("#")]),t._v(" 储藏（Stashing）")]),t._v(" "),e("p",[t._v("在一个分支上操作之后，如果还没有将修改提交到分支上，此时进行切换分支，那么另一个分支上也能看到新的修改。这是因为所有分支都共用一个工作区的缘故。")]),t._v(" "),e("p",[t._v("可以使用 git stash 将当前分支的修改储藏起来，此时当前工作区的所有修改都会被存到栈中，也就是说当前工作区是干净的，没有任何未提交的修改。此时就可以安全的切换到其它分支上了。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ git stash\nSaved working directory and index state \\ "WIP on master: 049d078 added the index file"\nHEAD is now at 049d078 added the index file (To restore them type "git stash apply")\n')])])]),e("p",[t._v("该功能可以用于 bug 分支的实现。如果当前正在 dev 分支上进行开发，但是此时 master 上有个 bug 需要修复，但是 dev 分支上的开发还未完成，不想立即提交。在新建 bug 分支并切换到 bug 分支之前就需要使用 git stash 将 dev 分支的未提交修改储藏起来。")]),t._v(" "),e("h2",{attrs:{id:"ssh-传输设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ssh-传输设置"}},[t._v("#")]),t._v(" SSH 传输设置")]),t._v(" "),e("p",[t._v("Git 仓库和 Github 中心仓库之间的传输是通过 SSH 加密。")]),t._v(" "),e("p",[t._v("如果工作区下没有 .ssh 目录，或者该目录下没有 id_rsa 和 id_rsa.pub 这两个文件，可以通过以下命令来创建 SSH Key：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ ssh-keygen -t rsa -C "youremail@example.com"\n')])])]),e("p",[t._v('然后把公钥 id_rsa.pub 的内容复制到 Github "Account settings" 的 SSH Keys 中。')]),t._v(" "),e("h2",{attrs:{id:"gitignore-文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitignore-文件"}},[t._v("#")]),t._v(" .gitignore 文件")]),t._v(" "),e("p",[t._v("忽略以下文件：")]),t._v(" "),e("ul",[e("li",[t._v("操作系统自动生成的文件，比如缩略图；")]),t._v(" "),e("li",[t._v("编译生成的中间文件，比如 Java 编译产生的 .class 文件；")]),t._v(" "),e("li",[t._v("自己的敏感信息，比如存放口令的配置文件。")])]),t._v(" "),e("p",[t._v("不需要全部自己编写，可以到 "),e("a",{attrs:{href:"https://github.com/github/gitignore",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/github/gitignore"),e("OutboundLink")],1),t._v(" 中进行查询。")]),t._v(" "),e("h2",{attrs:{id:"git-命令一览"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-命令一览"}},[t._v("#")]),t._v(" Git 命令一览")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/7a29acce-f243-4914-9f00-f2988c528412.jpg",width:""}})]),e("br"),t._v(" "),e("p",[t._v("比较详细的地址：http://www.cheat-sheets.org/saved-copy/git-cheat-sheet.pdf")]),t._v(" "),e("h2",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"http://rogerdudler.github.io/git-guide/index.zh.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git - 简明指南"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"http://marklodato.github.io/visual-git-guide/index-zh-cn.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("图解 Git"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000",target:"_blank",rel:"noopener noreferrer"}},[t._v("廖雪峰 : Git 教程"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://learngitbranching.js.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Learn Git Branching"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);